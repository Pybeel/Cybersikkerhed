// Mixins file for reusable style patterns

// Card mixin - for consistent card styling
@mixin card($bg: color(white), $padding: spacing(5), $radius: radius(lg), $shadow: shadow(md)) {
  background: $bg;
  padding: $padding;
  border-radius: $radius;
  box-shadow: $shadow;
}

// Content container mixin
@mixin container($max-width: 800px) {
  max-width: $max-width;
  margin: auto;
  margin-top: spacing(7);
  width: 100%;
}

// Gradient background
@mixin gradient-bg($start-color, $end-color, $direction: 90deg) {
  background: linear-gradient($direction, $start-color, $end-color);
}

// Flex layout shortcuts
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-row {
  display: flex;
  flex-direction: row;
}

// Button styling
@mixin button-base($bg: color(primary), $color: color(white), $hover-bg: color(primary-hover)) {
  background: $bg;
  color: $color;
  border: none;
  padding: spacing(3) spacing(4);
  border-radius: radius(md);
  font-size: font-size(lg);
  cursor: pointer;
  transition: transition(base);
  font-weight: 500;
  
  &:hover {
    background: $hover-bg;
  }
}

// Gradient button
@mixin button-gradient($start-color: color(primary), $end-color: color(primary-hover)) {
  @include button-base(transparent, color(white));
  @include gradient-bg($start-color, $end-color);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
  }
  
  &:active {
    transform: translateY(1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
}

// Text truncation
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Responsive font size
@mixin responsive-font($min-size, $max-size, $min-width: 320px, $max-width: 1200px) {
  font-size: $min-size;
  
  @media screen and (min-width: $min-width) {
    font-size: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * 
      ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)}));
  }
  
  @media screen and (min-width: $max-width) {
    font-size: $max-size;
  }
}

// Helper function to strip units
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// Media queries
@mixin breakpoint-up($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @media (min-width: $breakpoint) {
      @content;
    }
  }
}

@mixin breakpoint-down($breakpoint) {
  $value: 0;
  
  @if map-has-key($breakpoints, $breakpoint) {
    $value: map-get($breakpoints, $breakpoint) - 1px;
  } @else {
    $value: $breakpoint - 1px;
  }
  
  @media (max-width: $value) {
    @content;
  }
}

// Accessibility
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Animation mixins
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

@mixin animation($animation) {
  animation: $animation;
}

// Respond-to mixin for compatibility med eksisterende kode
@mixin respond-to($breakpoint) {
  @if $breakpoint == 'phone' {
    @media (max-width: 576px) { @content; }
  } @else if $breakpoint == 'tablet' {
    @media (min-width: 577px) and (max-width: 991px) { @content; }
  } @else if $breakpoint == 'desktop' {
    @media (min-width: 992px) { @content; }
  } @else if $breakpoint == 'large-desktop' {
    @media (min-width: 1200px) { @content; }
  } @else {
    @media (#{$breakpoint}) { @content; }
  }
}
